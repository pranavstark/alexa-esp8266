#include <Arduino.h>
#include <ESP8266WiFi.h>
#include "fauxmoESP.h"
#include "ESPAsyncWebServer.h"
#include <ESPAsyncTCP.h>
#include <Hash.h>


fauxmoESP fauxmo;
AsyncWebServer server(80);

// -----------------------------------------------------------------------------

#define SERIAL_BAUDRATE                 115200
/* Set Relay Pins */
#define RELAY_1 5
#define RELAY_2 4
#define RELAY_3 12
#define RELAY_4 14

// -----------------------------------------------------------------------------
// Wifi
// -----------------------------------------------------------------------------

void wifiSetup() {

  // Set WIFI module to STA mode
  WiFi.mode(WIFI_STA);

  // Connect
  Serial.printf("[WIFI] Connecting to %s ", WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASS);

  // Wait
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(100);
  }
  Serial.println();

  // Connected!
  Serial.printf("[WIFI] STATION Mode, SSID: %s, IP address: %s\n", WiFi.SSID().c_str(), WiFi.localIP().toString().c_str());

}

void serverSetup() {

  // Custom entry point (not required by the library, here just as an example)
  server.on("/index.html", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(200, "text/plain", "Hello, world");
  });

  // These two callbacks are required for gen1 and gen3 compatibility
  server.onRequestBody([](AsyncWebServerRequest * request, uint8_t *data, size_t len, size_t index, size_t total) {
    Serial.print(*data);
    if (fauxmo.process(request->client(), request->method() == HTTP_GET, request->url(), String((char *)data))) return;
    // Handle any other body request here...
  });
  server.onNotFound([](AsyncWebServerRequest * request) {
    String body = (request->hasParam("body", true)) ? request->getParam("body", true)->value() : String();
    if (fauxmo.process(request->client(), request->method() == HTTP_GET, request->url(), body)) return;
    // Handle not found request here...
  });

  // Start the server
  server.begin();

}

void setup() {

  // Init serial port and clean garbage
  Serial.begin(SERIAL_BAUDRATE);
  Serial.println();
  Serial.println();



  //Set relay pins to outputs
  pinMode(RELAY_1, OUTPUT);
  pinMode(RELAY_2, OUTPUT);
  pinMode(RELAY_3, OUTPUT);
  pinMode(RELAY_4, OUTPUT);


  //Set each relay pin to HIGH ====== NOTE THAT THE RELAYS USE INVERSE LOGIC =====
  digitalWrite(RELAY_1, HIGH);
  delay(500);
  digitalWrite(RELAY_2, HIGH);
  delay(500);
  digitalWrite(RELAY_3, HIGH);
  delay(500);
  digitalWrite(RELAY_4, HIGH);
  delay(500);


  // Wifi
  wifiSetup();

  // Web server
  serverSetup();

  // Set fauxmoESP to not create an internal TCP server and redirect requests to the server on the defined port
  // The TCP port must be 80 for gen3 devices (default is 1901)
  // This has to be done before the call to enable()
  fauxmo.createServer(false);
  fauxmo.setPort(80); // This is required for gen3 devices

  // You have to call enable(true) once you have a WiFi connection
  // You can enable or disable the library at any moment
  // Disabling it will prevent the devices from being discovered and switched
  fauxmo.enable(true);

  // You can use different ways to invoke alexa to modify the devices state:
  // "Alexa, turn kitchen on" ("kitchen" is the name of the first device below)
  // "Alexa, turn on kitchen"
  // "Alexa, set kitchen to fifty" (50 means 50% of brightness)

  // Add virtual devices
  fauxmo.addDevice("Light");
  fauxmo.addDevice("Camera");
  fauxmo.addDevice("Fan");
  fauxmo.addDevice("Outlet");



  fauxmo.onSetState([](unsigned char device_id, const char * device_name, bool state, unsigned char value) {

    // Callback when a command from Alexa is received.
    // You can use device_id or device_name to choose the element to perform an action onto (relay, LED,...)
    // State is a boolean (ON/OFF) and value a number from 0 to 255 (if you say "set kitchen light to 50%" you will receive a 128 here).
    // Just remember not to delay too much here, this is a callback, exit as soon as possible.
    // If you have to do something more involved here set a flag and process it in your main loop.

    // if (0 == device_id) digitalWrite(RELAY1_PIN, state);
    // if (1 == device_id) digitalWrite(RELAY2_PIN, state);
    // if (2 == device_id) analogWrite(LED1_PIN, value);

    Serial.printf("[MAIN] Device #%d (%s) state: %s value: %d\n", device_id, device_name, state ? "ON" : "OFF", value);
    Serial.print("Device "); Serial.print(device_name);
    Serial.print(" state: ");
   

    //Switching action on detection of device name

    if ( (strcmp(device_name, "Light") == 0) )
    {
      if (!state)
      {
        digitalWrite(RELAY_1, HIGH);
      }
      else
      {
        digitalWrite(RELAY_1, LOW);
        Serial.print("Light is On");
      }
    }

    if ( (strcmp(device_name, "Camera") == 0) )
    {
      if (!state)
      {
        digitalWrite(RELAY_2, HIGH);
      }
      else
      {
        digitalWrite(RELAY_2, LOW);
        Serial.print("Camera is On");
      }
    }

    if ( (strcmp(device_name, "Fan") == 0) )
    {
      if (!state)
      {
        digitalWrite(RELAY_3, HIGH);
      }
      else
      {
        digitalWrite(RELAY_3, LOW);
        Serial.print("Fan is On");
      }
    }

    if ( (strcmp(device_name, "Outlet") == 0) )
    {
      if (!state)
      {
        digitalWrite(RELAY_4, HIGH);
      }
      else
      {
        digitalWrite(RELAY_4, LOW);
        Serial.print("Outlet is On");
      }
    }


  });

}

void loop() {

  // fauxmoESP uses an async TCP server but a sync UDP server
  // Therefore, we have to manually poll for UDP packets
  fauxmo.handle();


}